#!/bin/bash
#
# lsinitramfs - dump the contents of an initramfs image
#
# Copyright (C) 2011 by Dave Reisner <d@falconindy.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#

shopt -s extglob

die() {
  local mesg=$1; shift
  printf "error: $fmt\n" "$@"
  exit 1
}

usage() {
  cat<<USAGE
usage: ${0##*/} [options] <initramfs>

  Options:
   -a             analyze contents
   -h             display this help
   -v             more verbose output
   -x             extract image to disk

USAGE
  exit 1
}

in_array() {
  local item needle=$1; shift

  for item; do
    [[ "$item" == $needle ]] && return 0 # Found
  done
  return 1 # Not Found
}

declare verbose=
declare list='--list'

while getopts ':ahvx' flag; do
  case $flag in
    a) analyze=1 ;;
    h) usage ;;
    v) verbose='--verbose'  ;;
    x) unset list ;;
    \?) die "invalid option -- '$OPTARG'" ;;
  esac
done
shift $(( OPTIND - 1 ))

declare image=$1

[[ $image ]] || usage
[[ -f $image ]] || die "$image: No such file"

if (( analyze )); then
  declare -a binaries explicitmod modules foundhooks hooks
  declare kernver compress ratio

  # read compression type
  case "$(file -b "$image")" in
    data|lzma*) compress=LZMA ;;
    gzip*) compress=gzip ;;
    bzip2*) compress=bzip2 ;;
    XZ*) compress=XZ ;;
  esac

  # calculate compression ratio
  if [[ $compress ]]; then
    divide() {
      local A=$1 B=$2 ratio=

      ratio=$(( A * 10000 / B % 10000 ))
      printf '%s.%s%%\n' "${ratio:0:2}" "${ratio:2}"
    }

    TIMEFORMAT=%R decomptime=$({ time bsdtar Oxf "$image" >/dev/null; } 2>&1 )
    ratio=$(divide "$(stat -c %s "$image")" "$(bsdtar Oxf "$image" | wc -c)")
  fi

  # read contents of image
  while read -r line; do
    if [[ $line = *.ko?(.gz) ]]; then # module
      if [[ -z $kernver ]]; then
        [[ $line =~ /lib/modules/([^/]+)/ ]] && kernver=${BASH_REMATCH[1]}
      fi
      line=${line##*/}
      modules+=("${line%.ko?(.gz)}")
      continue
    elif [[ $line = ./hooks/* ]]; then
      foundhooks+=("${line##*/}")
    elif [[ $line = *@(/bin/|/sbin/)* ]]; then
      binaries+=("${line#.}")
    fi
  done < <(bsdcpio -i --quiet --list <"$image")

  # extract and read config
  while read -r -a line; do
    case "${line[0]}" in
      "%HOOKS%")
        for hook in "${line[@]:1}"; do
          in_array "$hook" "${foundhooks[@]}" && hooks=("$hook")
        done
        ;;
      "%MODULES%") explicitmod=("${line[@]:2}") ;;
    esac
  done < <(bsdtar xOf "$image" config)

  # print results
  printf '==> Image: %s\n' "$(readlink -e "$image")"
  printf '==> Kernel: %s\n' "${kernver:-unknown}"

  if [[ $compress ]]; then
    printf '==> Compressed with: %s\n' "$compress"
    printf '  -> Compression ratio: %s\n' "$ratio"
    printf '  -> Estimated decompression time: %ss\n' "$decomptime"
  fi
  printf '\n'

  printf '==> Included modules:\n'
  printf '  %s\n' "${modules[@]}"
  printf '\n'

  printf '==> Included binaries:\n'
  printf '  %s\n' "${binaries[@]}"
  printf '\n'

  if (( ${#hooks[*]} )); then
    printf '==> Hook run order:\n'
    printf '  %s\n' "${hooks[@]}"
    printf '\n'
  fi

  if (( ${#explicitmod[*]} )); then
    printf '==> Explicitly loaded modules:\n'
    printf '  %s\n' "${explicitmod[@]}"
    printf '\n'
  fi
else
  bsdcpio -i --quiet $verbose $list <"$image"
fi

