=head1 NAME

geninit - modular initramfs creation utility

=head1 SYNOPSIS

Usage: I<geninit> [ options ]

=head1 DESCRIPTION

geninit is a tool for creating cpio archives to be used as an initial ramfs
during system bootstrap. It features a modular design, making it easy to
tailor the image to the system's hardware and software needs.

=head1 OPTIONS

=over 4

=item B<-b> I<basedir>

Specify a base directory other than C</>. This is reserved for usage during a
chroot. geninit will attempt to use as much as possible from the guest system,
drawing only from the host system when necessary.

=item B<-c> I<config-file>

Use an alterate config file. Defaults to C</etc/geninit.conf>.

=item B<-g> I<imagename>

Specify the absolute path of the generated initramfs image. If unspecified,
a dry-run will be performed and no image will be created.

=item B<-H> I<builder>

Display the help message for a I<builder>. A list of available builders can
be generated with the B<-L> option.

=item B<-h>

Display the help message and quit.

=item B<-k> I<kernel>

Specify an alternate kernel version to create an image for. The kernel can be
specified as an exact version (such as 2.6.38-ARCH), or provided as a path to
the kernel bzImage itself. By default, this is the currently loaded kernel.

=item B<-L>

List all available builders for use in the I<builders> array in the config
file.

=item B<-p> I<preset>

Specify a preset file to drive image creation. This is any file named with a
.preset extension in C</etc/geninit.d>. An example preset file is packaged
with geninit for explanatory purpose.

=item B<-S> I<builders>

A comma delimited list of builders to skip during image creation.

=item B<-s>

Save the temporary workspace after the build process. This is useful for
debugging purposes.

=item B<-t> I<path>

Specify an alterate version to the temporary directory used as a workspace. This
needs to be a writeable directory with a minimum of 20mb free.

=item B<-z> I<compression>

Override the compression method specified by the config file. geninit supports
compression via B<gzip>, B<bzip2>, B<lzma>, and B<xz>. You can also use B<none>
to disable compression. Please note that your kernel I<must> support your
method and choice and your kernel will not be checked for this support! If in
doubt, gzip is a safe choice.

=back

=head1 EXAMPLES

=over 4

=item B<geninit>

Perform a dry run against the currently loaded kernel. Although a temporary
workspace is created, no bootable image is generated from this operation.

=item B<geninit -k /boot/vmlinuz26 -g /boot/initramfs-ARCH>

Create an image for the kernel located at C</boot/vmlinuz26> called
C</boot/initramfs-ARCH>, described by the default config file.

=item B<geninit -b /mnt -p kernel26>

Build an image, or images, as described in C</mnt/etc/geninit.d/kernel26.preset>.

=back

=head1 BUILDERS

Builders are bash scripts that are parsed during build time in order to add
functionality to the image. They are sourced from the appropriate config file,
and parsed in array index order. Builders may draw in an additional hookscript
for use at runtime.

At a minimum, builders must define a function called I<build>, which contains
instructions on what geninit should add to the image. See the B<BUILDER API>
section for documentation on the available methods for adding files.
Additionally, a builder should also include a I<helpmsg> function, which
describes the features and/or functionality provided by the builder. This is
called via geninit's -H option.

=head1 HOOKS

Hooks are executed during the bootstrap process in order to facilitate finding
and/or mounting of the root device. They run under Busybox's almquist shell.
Because hooks are run as a child process of init, they are unable to directly
export variables affecting their parent. If you need to communicate back with
init, you may write environment variable declarations on file descriptor
pointed to by the B<FDINIT> environment variable, which will be picked back up
into the environment of init, e.g.

  echo 'root=/dev/foo' >&$FDINIT

Note that B<FDINIT> is also available for any rescue shell that may be invoked
during bootstrap.

=head1 BUILDER API

geninit features a small API intended for use by builders. These are base
directory aware functions with error checking and are the recommended method of
adding files to the cpio image from builders. Leading path components, if not
already created, will be added implicitly. If, for some reason, you need to
override the base directory and specify a truly absolute path, you can prefix a
source argument with a '@'.

=over 4

=item B<add_binary> I<source> [I<path>]

Add a binary file, specified by the absolute path to its source. Unless specified,
the path on the image will be the same as the source. Files will be scanned for
library dependencies which will also be added to the image.

=item B<add_dir> I<path> [I<mode>]

Add a directory, specified by its absolute path on the image. Unless specified,
the permissions of the directory will be 755.

=item B<add_driver_classes> I<class>...

Add one or more classifications of modules to the image, specified as a
directory relative to C</lib/modules/KERNELVERSION/kernel>, e.g. 'drivers/scsi'
or 'crypto'. Modules can be filtered by name by adding glob (including extended
glob) patterns to the I<MODFILTER> array prior to calling
B<add_driver_classes>. This filter is cleared after the parsing of each hook,
although you are free to call B<unset> from within the builder, if desired.

Additionally, if the autodetect builder is used as part of image generation,
only the intersection of the autodetect module list and the results of the
add_driver_classes call will be added to the resulting image.

=item B<add_file> I<source> [I<path>]

Add a plain file, specified by the absolute path to its source. Unless
specified, the path on the image will be the same as the source. No
type checking of the file is done.

=item B<add_module> I<module_name>

Add a kernel module to the image, specified by its name (with or without
extension). Modules will be scanned for dependencies and firmware which will
also be added to the image.

=item B<add_path_to_file> I<file>

Add all leading path components to a file to the image.

=item B<add_pipe> I<path> [I<mode>]

Add a FIFO device to the image, specified by its absolute path. Unless
specified, the permissions of the FIFO will be 644.

=item B<add_symlink> I<target> I<link>

Add a symlink to the image, located at the absolute path specified by link,
and pointing to the path specified by target.

=item B<use_hookscript> [I<script>]

Indicate that a script should be added to be run during bootstrap. Unless
specified, geninit will look for a script by the same name as the builder.

=back

=head1 FILES AND DIRECTORIES

=over 4

=item C</etc/geninit.conf>

Default config file

=item C</etc/geninit.d>

Location of geninit preset files

=item C</usr/share/geninit/geninit.api>

Builder API file

=item C</usr/share/geninit/builders>

Location of builders

=item C</usr/share/geninit/hooks>

Location of hookscripts

=back

=head1 AUTHOR

Dave Reisner E<lt>d@falconindy.comE<gt>

